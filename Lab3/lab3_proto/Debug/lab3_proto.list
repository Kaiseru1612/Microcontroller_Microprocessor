
lab3_proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bcc  08002bcc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002bcc  08002bcc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bcc  08002bcc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000024  08002bf8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002bf8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000960d  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdf  00000000  00000000  0002965a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b5e  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b894  00000000  00000000  000430d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008215b  00000000  00000000  0004e96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  000d0b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b88 	.word	0x08002b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002b88 	.word	0x08002b88

0800014c <turn_off_7seg>:
#include "display7SEG.h"



void turn_off_7seg(int disp_no)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(disp_no==1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d105      	bne.n	8000166 <turn_off_7seg+0x1a>
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2102      	movs	r1, #2
 800015e:	480f      	ldr	r0, [pc, #60]	; (800019c <turn_off_7seg+0x50>)
 8000160:	f001 fce9 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
	}
	else{
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
	}
}
 8000164:	e016      	b.n	8000194 <turn_off_7seg+0x48>
	else if(disp_no==2)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d105      	bne.n	8000178 <turn_off_7seg+0x2c>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2104      	movs	r1, #4
 8000170:	480a      	ldr	r0, [pc, #40]	; (800019c <turn_off_7seg+0x50>)
 8000172:	f001 fce0 	bl	8001b36 <HAL_GPIO_WritePin>
}
 8000176:	e00d      	b.n	8000194 <turn_off_7seg+0x48>
	else if(disp_no==3)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b03      	cmp	r3, #3
 800017c:	d105      	bne.n	800018a <turn_off_7seg+0x3e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	2108      	movs	r1, #8
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <turn_off_7seg+0x50>)
 8000184:	f001 fcd7 	bl	8001b36 <HAL_GPIO_WritePin>
}
 8000188:	e004      	b.n	8000194 <turn_off_7seg+0x48>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	2110      	movs	r1, #16
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <turn_off_7seg+0x50>)
 8000190:	f001 fcd1 	bl	8001b36 <HAL_GPIO_WritePin>
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <display7SEG>:
void display7SEG(unsigned int disp_no, int var1)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	unsigned char disp_arr[10]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
 80001aa:	4a47      	ldr	r2, [pc, #284]	; (80002c8 <display7SEG+0x128>)
 80001ac:	f107 030c 	add.w	r3, r7, #12
 80001b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001b2:	c303      	stmia	r3!, {r0, r1}
 80001b4:	801a      	strh	r2, [r3, #0]
	unsigned char bit_var, var2;

	if(disp_no==1) // turn on first 7segled
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d105      	bne.n	80001c8 <display7SEG+0x28>
	{
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2102      	movs	r1, #2
 80001c0:	4842      	ldr	r0, [pc, #264]	; (80002cc <display7SEG+0x12c>)
 80001c2:	f001 fcb8 	bl	8001b36 <HAL_GPIO_WritePin>
 80001c6:	e019      	b.n	80001fc <display7SEG+0x5c>

	}
	else if(disp_no==2) // turn on second 7segled
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d105      	bne.n	80001da <display7SEG+0x3a>
	{
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2104      	movs	r1, #4
 80001d2:	483e      	ldr	r0, [pc, #248]	; (80002cc <display7SEG+0x12c>)
 80001d4:	f001 fcaf 	bl	8001b36 <HAL_GPIO_WritePin>
 80001d8:	e010      	b.n	80001fc <display7SEG+0x5c>


	}
	else if(disp_no==3)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d105      	bne.n	80001ec <display7SEG+0x4c>
	{
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2108      	movs	r1, #8
 80001e4:	4839      	ldr	r0, [pc, #228]	; (80002cc <display7SEG+0x12c>)
 80001e6:	f001 fca6 	bl	8001b36 <HAL_GPIO_WritePin>
 80001ea:	e007      	b.n	80001fc <display7SEG+0x5c>

	}

	else if(disp_no==4)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b04      	cmp	r3, #4
 80001f0:	d104      	bne.n	80001fc <display7SEG+0x5c>
	{
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	4835      	ldr	r0, [pc, #212]	; (80002cc <display7SEG+0x12c>)
 80001f8:	f001 fc9d 	bl	8001b36 <HAL_GPIO_WritePin>
	}


	var2 = disp_arr[var1];
 80001fc:	f107 020c 	add.w	r2, r7, #12
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	4413      	add	r3, r2
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	75fb      	strb	r3, [r7, #23]
	bit_var = var2 & 0x01;
 8000208:	7dfb      	ldrb	r3, [r7, #23]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, bit_var);
 8000210:	7dbb      	ldrb	r3, [r7, #22]
 8000212:	461a      	mov	r2, r3
 8000214:	2101      	movs	r1, #1
 8000216:	482e      	ldr	r0, [pc, #184]	; (80002d0 <display7SEG+0x130>)
 8000218:	f001 fc8d 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>1)& 0x01;
 800021c:	7dfb      	ldrb	r3, [r7, #23]
 800021e:	085b      	lsrs	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, bit_var);
 8000228:	7dbb      	ldrb	r3, [r7, #22]
 800022a:	461a      	mov	r2, r3
 800022c:	2102      	movs	r1, #2
 800022e:	4828      	ldr	r0, [pc, #160]	; (80002d0 <display7SEG+0x130>)
 8000230:	f001 fc81 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>2)& 0x01;
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	089b      	lsrs	r3, r3, #2
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, bit_var);
 8000240:	7dbb      	ldrb	r3, [r7, #22]
 8000242:	461a      	mov	r2, r3
 8000244:	2104      	movs	r1, #4
 8000246:	4822      	ldr	r0, [pc, #136]	; (80002d0 <display7SEG+0x130>)
 8000248:	f001 fc75 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>3)& 0x01;
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	08db      	lsrs	r3, r3, #3
 8000250:	b2db      	uxtb	r3, r3
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, bit_var);
 8000258:	7dbb      	ldrb	r3, [r7, #22]
 800025a:	461a      	mov	r2, r3
 800025c:	2108      	movs	r1, #8
 800025e:	481c      	ldr	r0, [pc, #112]	; (80002d0 <display7SEG+0x130>)
 8000260:	f001 fc69 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>4)& 0x01;
 8000264:	7dfb      	ldrb	r3, [r7, #23]
 8000266:	091b      	lsrs	r3, r3, #4
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, bit_var);
 8000270:	7dbb      	ldrb	r3, [r7, #22]
 8000272:	461a      	mov	r2, r3
 8000274:	2110      	movs	r1, #16
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <display7SEG+0x130>)
 8000278:	f001 fc5d 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>5)& 0x01;
 800027c:	7dfb      	ldrb	r3, [r7, #23]
 800027e:	095b      	lsrs	r3, r3, #5
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, bit_var);
 8000288:	7dbb      	ldrb	r3, [r7, #22]
 800028a:	461a      	mov	r2, r3
 800028c:	2120      	movs	r1, #32
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <display7SEG+0x130>)
 8000290:	f001 fc51 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>6)& 0x01;
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	099b      	lsrs	r3, r3, #6
 8000298:	b2db      	uxtb	r3, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, bit_var);
 80002a0:	7dbb      	ldrb	r3, [r7, #22]
 80002a2:	461a      	mov	r2, r3
 80002a4:	2140      	movs	r1, #64	; 0x40
 80002a6:	480a      	ldr	r0, [pc, #40]	; (80002d0 <display7SEG+0x130>)
 80002a8:	f001 fc45 	bl	8001b36 <HAL_GPIO_WritePin>

	bit_var=(var2>>7)& 0x01;
 80002ac:	7dfb      	ldrb	r3, [r7, #23]
 80002ae:	09db      	lsrs	r3, r3, #7
 80002b0:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, bit_var);
 80002b2:	7dbb      	ldrb	r3, [r7, #22]
 80002b4:	461a      	mov	r2, r3
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <display7SEG+0x130>)
 80002ba:	f001 fc3c 	bl	8001b36 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	08002ba0 	.word	0x08002ba0
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <fsm_for_input_processing>:
static int tmp_time=0;

  enum ButtonState { MODE_0 , MODE_1, EDIT_MODE1, MODE_2, EDIT_MODE2, MODE_3, EDIT_MODE3} buttonState;
  enum ButtonState buttonState = MODE_0;

void fsm_for_input_processing (){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	switch(buttonState)
 80002d8:	4b9b      	ldr	r3, [pc, #620]	; (8000548 <fsm_for_input_processing+0x274>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b06      	cmp	r3, #6
 80002de:	f200 8182 	bhi.w	80005e6 <fsm_for_input_processing+0x312>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <fsm_for_input_processing+0x14>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	08000305 	.word	0x08000305
 80002ec:	08000337 	.word	0x08000337
 80002f0:	0800038f 	.word	0x0800038f
 80002f4:	08000405 	.word	0x08000405
 80002f8:	0800045d 	.word	0x0800045d
 80002fc:	080004d3 	.word	0x080004d3
 8000300:	0800055d 	.word	0x0800055d
		  {
		  case MODE_0:
			  clear_all();
 8000304:	f000 faa6 	bl	8000854 <clear_all>
			  display_led_normal(red_time, yellow_time, green_time);
 8000308:	4b90      	ldr	r3, [pc, #576]	; (800054c <fsm_for_input_processing+0x278>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a90      	ldr	r2, [pc, #576]	; (8000550 <fsm_for_input_processing+0x27c>)
 800030e:	6811      	ldr	r1, [r2, #0]
 8000310:	4a90      	ldr	r2, [pc, #576]	; (8000554 <fsm_for_input_processing+0x280>)
 8000312:	6812      	ldr	r2, [r2, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb21 	bl	800095c <display_led_normal>
			  if(is_button_pressed(0))
 800031a:	2000      	movs	r0, #0
 800031c:	f000 f9fa 	bl	8000714 <is_button_pressed>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d003      	beq.n	800032e <fsm_for_input_processing+0x5a>
			  {
			  	buttonState = MODE_1;
 8000326:	4b88      	ldr	r3, [pc, #544]	; (8000548 <fsm_for_input_processing+0x274>)
 8000328:	2201      	movs	r2, #1
 800032a:	701a      	strb	r2, [r3, #0]
			  }
			  else{
			  	buttonState = MODE_0;
			  }
			 break;
 800032c:	e15b      	b.n	80005e6 <fsm_for_input_processing+0x312>
			  	buttonState = MODE_0;
 800032e:	4b86      	ldr	r3, [pc, #536]	; (8000548 <fsm_for_input_processing+0x274>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
			 break;
 8000334:	e157      	b.n	80005e6 <fsm_for_input_processing+0x312>

		  case MODE_1:
			  clear_all();
 8000336:	f000 fa8d 	bl	8000854 <clear_all>
			  display_mode(1, red_time, yellow_time, green_time);
 800033a:	4b84      	ldr	r3, [pc, #528]	; (800054c <fsm_for_input_processing+0x278>)
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	4b84      	ldr	r3, [pc, #528]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b84      	ldr	r3, [pc, #528]	; (8000554 <fsm_for_input_processing+0x280>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fdac 	bl	8000ea4 <display_mode>
			  tmp_time = red_time;
 800034c:	4b7f      	ldr	r3, [pc, #508]	; (800054c <fsm_for_input_processing+0x278>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a81      	ldr	r2, [pc, #516]	; (8000558 <fsm_for_input_processing+0x284>)
 8000352:	6013      	str	r3, [r2, #0]
			  if(is_button_pressed(0))
 8000354:	2000      	movs	r0, #0
 8000356:	f000 f9dd 	bl	8000714 <is_button_pressed>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <fsm_for_input_processing+0x92>
			  {
			  	buttonState = MODE_2;
 8000360:	4b79      	ldr	r3, [pc, #484]	; (8000548 <fsm_for_input_processing+0x274>)
 8000362:	2203      	movs	r2, #3
 8000364:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1)){
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f9d4 	bl	8000714 <is_button_pressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	f000 812e 	beq.w	80005d0 <fsm_for_input_processing+0x2fc>
			  	if (red_time < 100) {
 8000374:	4b75      	ldr	r3, [pc, #468]	; (800054c <fsm_for_input_processing+0x278>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b63      	cmp	r3, #99	; 0x63
 800037a:	dc04      	bgt.n	8000386 <fsm_for_input_processing+0xb2>
			  		red_time++;
 800037c:	4b73      	ldr	r3, [pc, #460]	; (800054c <fsm_for_input_processing+0x278>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	4a72      	ldr	r2, [pc, #456]	; (800054c <fsm_for_input_processing+0x278>)
 8000384:	6013      	str	r3, [r2, #0]
			  	}
			  	buttonState = EDIT_MODE1;
 8000386:	4b70      	ldr	r3, [pc, #448]	; (8000548 <fsm_for_input_processing+0x274>)
 8000388:	2202      	movs	r2, #2
 800038a:	701a      	strb	r2, [r3, #0]
			  }
			 break;
 800038c:	e120      	b.n	80005d0 <fsm_for_input_processing+0x2fc>
		  case EDIT_MODE1:
			  clear_all();
 800038e:	f000 fa61 	bl	8000854 <clear_all>
			  display_mode(1, red_time, yellow_time, green_time);
 8000392:	4b6e      	ldr	r3, [pc, #440]	; (800054c <fsm_for_input_processing+0x278>)
 8000394:	6819      	ldr	r1, [r3, #0]
 8000396:	4b6e      	ldr	r3, [pc, #440]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b6e      	ldr	r3, [pc, #440]	; (8000554 <fsm_for_input_processing+0x280>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fd80 	bl	8000ea4 <display_mode>
			  if(is_button_pressed(0))
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 f9b5 	bl	8000714 <is_button_pressed>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d006      	beq.n	80003be <fsm_for_input_processing+0xea>
			  {
				red_time = tmp_time;
 80003b0:	4b69      	ldr	r3, [pc, #420]	; (8000558 <fsm_for_input_processing+0x284>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a65      	ldr	r2, [pc, #404]	; (800054c <fsm_for_input_processing+0x278>)
 80003b6:	6013      	str	r3, [r2, #0]
			  	buttonState = MODE_1;
 80003b8:	4b63      	ldr	r3, [pc, #396]	; (8000548 <fsm_for_input_processing+0x274>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1)){
 80003be:	2001      	movs	r0, #1
 80003c0:	f000 f9a8 	bl	8000714 <is_button_pressed>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <fsm_for_input_processing+0x108>
			  		if (red_time<100) {
 80003ca:	4b60      	ldr	r3, [pc, #384]	; (800054c <fsm_for_input_processing+0x278>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b63      	cmp	r3, #99	; 0x63
 80003d0:	dc04      	bgt.n	80003dc <fsm_for_input_processing+0x108>
			  			red_time++;
 80003d2:	4b5e      	ldr	r3, [pc, #376]	; (800054c <fsm_for_input_processing+0x278>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	4a5c      	ldr	r2, [pc, #368]	; (800054c <fsm_for_input_processing+0x278>)
 80003da:	6013      	str	r3, [r2, #0]
			  		}
			  }
			  if(is_button_pressed(2)){
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 f999 	bl	8000714 <is_button_pressed>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	f000 80f5 	beq.w	80005d4 <fsm_for_input_processing+0x300>
				  	 display_mode(0, red_time, yellow_time, green_time);
 80003ea:	4b58      	ldr	r3, [pc, #352]	; (800054c <fsm_for_input_processing+0x278>)
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	4b58      	ldr	r3, [pc, #352]	; (8000550 <fsm_for_input_processing+0x27c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b58      	ldr	r3, [pc, #352]	; (8000554 <fsm_for_input_processing+0x280>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 fd54 	bl	8000ea4 <display_mode>
				  	buttonState = MODE_1;
 80003fc:	4b52      	ldr	r3, [pc, #328]	; (8000548 <fsm_for_input_processing+0x274>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000402:	e0e7      	b.n	80005d4 <fsm_for_input_processing+0x300>
		  case MODE_2:
			  clear_all();
 8000404:	f000 fa26 	bl	8000854 <clear_all>
			  display_mode(2, red_time, yellow_time, green_time);
 8000408:	4b50      	ldr	r3, [pc, #320]	; (800054c <fsm_for_input_processing+0x278>)
 800040a:	6819      	ldr	r1, [r3, #0]
 800040c:	4b50      	ldr	r3, [pc, #320]	; (8000550 <fsm_for_input_processing+0x27c>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b50      	ldr	r3, [pc, #320]	; (8000554 <fsm_for_input_processing+0x280>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2002      	movs	r0, #2
 8000416:	f000 fd45 	bl	8000ea4 <display_mode>
			  tmp_time = yellow_time;
 800041a:	4b4d      	ldr	r3, [pc, #308]	; (8000550 <fsm_for_input_processing+0x27c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a4e      	ldr	r2, [pc, #312]	; (8000558 <fsm_for_input_processing+0x284>)
 8000420:	6013      	str	r3, [r2, #0]
			  if(is_button_pressed(0))
 8000422:	2000      	movs	r0, #0
 8000424:	f000 f976 	bl	8000714 <is_button_pressed>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <fsm_for_input_processing+0x160>
			  {
			  	buttonState = MODE_3;
 800042e:	4b46      	ldr	r3, [pc, #280]	; (8000548 <fsm_for_input_processing+0x274>)
 8000430:	2205      	movs	r2, #5
 8000432:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1))
 8000434:	2001      	movs	r0, #1
 8000436:	f000 f96d 	bl	8000714 <is_button_pressed>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	f000 80cb 	beq.w	80005d8 <fsm_for_input_processing+0x304>
			  {
				if (yellow_time < 100) {
 8000442:	4b43      	ldr	r3, [pc, #268]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b63      	cmp	r3, #99	; 0x63
 8000448:	dc04      	bgt.n	8000454 <fsm_for_input_processing+0x180>
					yellow_time++;
 800044a:	4b41      	ldr	r3, [pc, #260]	; (8000550 <fsm_for_input_processing+0x27c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a3f      	ldr	r2, [pc, #252]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000452:	6013      	str	r3, [r2, #0]
				}
			  	buttonState = EDIT_MODE2;
 8000454:	4b3c      	ldr	r3, [pc, #240]	; (8000548 <fsm_for_input_processing+0x274>)
 8000456:	2204      	movs	r2, #4
 8000458:	701a      	strb	r2, [r3, #0]
			  }
			 break;
 800045a:	e0bd      	b.n	80005d8 <fsm_for_input_processing+0x304>
		  case EDIT_MODE2:
			  clear_all();
 800045c:	f000 f9fa 	bl	8000854 <clear_all>
			  display_mode(2, red_time, yellow_time, green_time);
 8000460:	4b3a      	ldr	r3, [pc, #232]	; (800054c <fsm_for_input_processing+0x278>)
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	4b3a      	ldr	r3, [pc, #232]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b3a      	ldr	r3, [pc, #232]	; (8000554 <fsm_for_input_processing+0x280>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2002      	movs	r0, #2
 800046e:	f000 fd19 	bl	8000ea4 <display_mode>
			  if(is_button_pressed(0))
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f94e 	bl	8000714 <is_button_pressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d006      	beq.n	800048c <fsm_for_input_processing+0x1b8>
			  {
				yellow_time = tmp_time;
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <fsm_for_input_processing+0x284>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a33      	ldr	r2, [pc, #204]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000484:	6013      	str	r3, [r2, #0]
			  	buttonState = MODE_2;
 8000486:	4b30      	ldr	r3, [pc, #192]	; (8000548 <fsm_for_input_processing+0x274>)
 8000488:	2203      	movs	r2, #3
 800048a:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1)){
 800048c:	2001      	movs	r0, #1
 800048e:	f000 f941 	bl	8000714 <is_button_pressed>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d008      	beq.n	80004aa <fsm_for_input_processing+0x1d6>
			  		if (yellow_time < 100) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <fsm_for_input_processing+0x27c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b63      	cmp	r3, #99	; 0x63
 800049e:	dc04      	bgt.n	80004aa <fsm_for_input_processing+0x1d6>
			  			yellow_time++;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <fsm_for_input_processing+0x27c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <fsm_for_input_processing+0x27c>)
 80004a8:	6013      	str	r3, [r2, #0]
			  		}
			  }
			  if(is_button_pressed(2)){
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f932 	bl	8000714 <is_button_pressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f000 8092 	beq.w	80005dc <fsm_for_input_processing+0x308>
				  	 display_mode(0, red_time, yellow_time, green_time);
 80004b8:	4b24      	ldr	r3, [pc, #144]	; (800054c <fsm_for_input_processing+0x278>)
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <fsm_for_input_processing+0x27c>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b24      	ldr	r3, [pc, #144]	; (8000554 <fsm_for_input_processing+0x280>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fced 	bl	8000ea4 <display_mode>
				  	buttonState = MODE_2;
 80004ca:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <fsm_for_input_processing+0x274>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80004d0:	e084      	b.n	80005dc <fsm_for_input_processing+0x308>
		  case MODE_3:
			  clear_all();
 80004d2:	f000 f9bf 	bl	8000854 <clear_all>
			  display_mode(3, red_time, yellow_time, green_time);
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <fsm_for_input_processing+0x278>)
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <fsm_for_input_processing+0x27c>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <fsm_for_input_processing+0x280>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2003      	movs	r0, #3
 80004e4:	f000 fcde 	bl	8000ea4 <display_mode>
			  tmp_time = green_time;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <fsm_for_input_processing+0x280>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <fsm_for_input_processing+0x284>)
 80004ee:	6013      	str	r3, [r2, #0]
			  if(is_button_pressed(0))
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 f90f 	bl	8000714 <is_button_pressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d012      	beq.n	8000522 <fsm_for_input_processing+0x24e>
			  {
				red_time = yellow_time + green_time;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <fsm_for_input_processing+0x27c>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <fsm_for_input_processing+0x280>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <fsm_for_input_processing+0x278>)
 8000508:	6013      	str	r3, [r2, #0]
				init_led(red_time, yellow_time, green_time);
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <fsm_for_input_processing+0x278>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a10      	ldr	r2, [pc, #64]	; (8000550 <fsm_for_input_processing+0x27c>)
 8000510:	6811      	ldr	r1, [r2, #0]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <fsm_for_input_processing+0x280>)
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f982 	bl	8000820 <init_led>
			  	buttonState = MODE_0;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <fsm_for_input_processing+0x274>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1)){
 8000522:	2001      	movs	r0, #1
 8000524:	f000 f8f6 	bl	8000714 <is_button_pressed>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d058      	beq.n	80005e0 <fsm_for_input_processing+0x30c>
			  		if (green_time < 100){
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <fsm_for_input_processing+0x280>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b63      	cmp	r3, #99	; 0x63
 8000534:	dc04      	bgt.n	8000540 <fsm_for_input_processing+0x26c>
			  			green_time++;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <fsm_for_input_processing+0x280>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <fsm_for_input_processing+0x280>)
 800053e:	6013      	str	r3, [r2, #0]
			  		}
			  		buttonState = EDIT_MODE3;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <fsm_for_input_processing+0x274>)
 8000542:	2206      	movs	r2, #6
 8000544:	701a      	strb	r2, [r3, #0]
			  }
			 break;
 8000546:	e04b      	b.n	80005e0 <fsm_for_input_processing+0x30c>
 8000548:	20000044 	.word	0x20000044
 800054c:	20000000 	.word	0x20000000
 8000550:	20000004 	.word	0x20000004
 8000554:	20000008 	.word	0x20000008
 8000558:	20000040 	.word	0x20000040
		  case EDIT_MODE3:
			  clear_all();
 800055c:	f000 f97a 	bl	8000854 <clear_all>
			  display_mode(3, red_time, yellow_time, green_time);
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <fsm_for_input_processing+0x318>)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <fsm_for_input_processing+0x31c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <fsm_for_input_processing+0x320>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2003      	movs	r0, #3
 800056e:	f000 fc99 	bl	8000ea4 <display_mode>
			  if(is_button_pressed(0))
 8000572:	2000      	movs	r0, #0
 8000574:	f000 f8ce 	bl	8000714 <is_button_pressed>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d006      	beq.n	800058c <fsm_for_input_processing+0x2b8>
			  {
				green_time = tmp_time;
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <fsm_for_input_processing+0x324>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <fsm_for_input_processing+0x320>)
 8000584:	6013      	str	r3, [r2, #0]
			  	buttonState = MODE_2;
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <fsm_for_input_processing+0x328>)
 8000588:	2203      	movs	r2, #3
 800058a:	701a      	strb	r2, [r3, #0]
			  }
			  if(is_button_pressed(1)){
 800058c:	2001      	movs	r0, #1
 800058e:	f000 f8c1 	bl	8000714 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d008      	beq.n	80005aa <fsm_for_input_processing+0x2d6>
			  		if (green_time < 100) {
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <fsm_for_input_processing+0x320>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b63      	cmp	r3, #99	; 0x63
 800059e:	dc04      	bgt.n	80005aa <fsm_for_input_processing+0x2d6>
			  			green_time++;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <fsm_for_input_processing+0x320>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <fsm_for_input_processing+0x320>)
 80005a8:	6013      	str	r3, [r2, #0]
			  		}
			  }
			  if(is_button_pressed(2)){
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 f8b2 	bl	8000714 <is_button_pressed>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d016      	beq.n	80005e4 <fsm_for_input_processing+0x310>
				  	 display_mode(0, red_time, yellow_time, green_time);
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <fsm_for_input_processing+0x318>)
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <fsm_for_input_processing+0x31c>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <fsm_for_input_processing+0x320>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fc6e 	bl	8000ea4 <display_mode>
				  	buttonState = MODE_3;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <fsm_for_input_processing+0x328>)
 80005ca:	2205      	movs	r2, #5
 80005cc:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80005ce:	e009      	b.n	80005e4 <fsm_for_input_processing+0x310>
			 break;
 80005d0:	bf00      	nop
 80005d2:	e008      	b.n	80005e6 <fsm_for_input_processing+0x312>
			  break;
 80005d4:	bf00      	nop
 80005d6:	e006      	b.n	80005e6 <fsm_for_input_processing+0x312>
			 break;
 80005d8:	bf00      	nop
 80005da:	e004      	b.n	80005e6 <fsm_for_input_processing+0x312>
			  break;
 80005dc:	bf00      	nop
 80005de:	e002      	b.n	80005e6 <fsm_for_input_processing+0x312>
			 break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <fsm_for_input_processing+0x312>
			  break;
 80005e4:	bf00      	nop
		  }

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000040 	.word	0x20000040
 80005fc:	20000044 	.word	0x20000044

08000600 <button_reading>:

static uint8_t  flagForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_reading(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	for( int i=0;i<NO_OF_BUTTONS;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e06f      	b.n	80006ec <button_reading+0xec>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800060c:	4a3b      	ldr	r2, [pc, #236]	; (80006fc <button_reading+0xfc>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <button_reading+0x100>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
		if(i==0)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10a      	bne.n	800063a <button_reading+0x3a>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin);
 8000624:	2120      	movs	r1, #32
 8000626:	4837      	ldr	r0, [pc, #220]	; (8000704 <button_reading+0x104>)
 8000628:	f001 fa6e 	bl	8001b08 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	4619      	mov	r1, r3
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <button_reading+0xfc>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	460a      	mov	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
		}
		if (i==1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10a      	bne.n	8000656 <button_reading+0x56>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,BUTTON_2_Pin);
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4830      	ldr	r0, [pc, #192]	; (8000704 <button_reading+0x104>)
 8000644:	f001 fa60 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	4619      	mov	r1, r3
 800064c:	4a2b      	ldr	r2, [pc, #172]	; (80006fc <button_reading+0xfc>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
		}
		if (i==2)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d10a      	bne.n	8000672 <button_reading+0x72>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,BUTTON_3_Pin);
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	4829      	ldr	r0, [pc, #164]	; (8000704 <button_reading+0x104>)
 8000660:	f001 fa52 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	4619      	mov	r1, r3
 8000668:	4a24      	ldr	r2, [pc, #144]	; (80006fc <button_reading+0xfc>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	460a      	mov	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
		}

		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <button_reading+0xfc>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4921      	ldr	r1, [pc, #132]	; (8000700 <button_reading+0x100>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	440b      	add	r3, r1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	429a      	cmp	r2, r3
 8000684:	d108      	bne.n	8000698 <button_reading+0x98>
		{
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000686:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <button_reading+0xfc>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	7819      	ldrb	r1, [r3, #0]
 800068e:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <button_reading+0x108>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	460a      	mov	r2, r1
 8000696:	701a      	strb	r2, [r3, #0]
		}

		if(buttonBuffer[i]==BUTTON_IS_PRESSED)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <button_reading+0x108>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d116      	bne.n	80006d2 <button_reading+0xd2>
		{
			if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING )
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <button_reading+0x10c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ac:	2b63      	cmp	r3, #99	; 0x63
 80006ae:	d80a      	bhi.n	80006c6 <button_reading+0xc6>
			{
				counterForButtonPress1s[i]++;
 80006b0:	4a16      	ldr	r2, [pc, #88]	; (800070c <button_reading+0x10c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b299      	uxth	r1, r3
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <button_reading+0x10c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006c4:	e00f      	b.n	80006e6 <button_reading+0xe6>
			} else{
				// the flag is turned on when 1 second has passed
				flagForButtonPress1s[i] = 1;
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <button_reading+0x110>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e009      	b.n	80006e6 <button_reading+0xe6>

				// do something here
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <button_reading+0x10c>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2100      	movs	r1, #0
 80006d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <button_reading+0x110>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	for( int i=0;i<NO_OF_BUTTONS;i++)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	dd8c      	ble.n	800060c <button_reading+0xc>
		}
	}
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000004c 	.word	0x2000004c
 8000700:	20000050 	.word	0x20000050
 8000704:	40010800 	.word	0x40010800
 8000708:	20000048 	.word	0x20000048
 800070c:	20000058 	.word	0x20000058
 8000710:	20000054 	.word	0x20000054

08000714 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d901      	bls.n	8000728 <is_button_pressed+0x14>
 8000724:	2300      	movs	r3, #0
 8000726:	e007      	b.n	8000738 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4a06      	ldr	r2, [pc, #24]	; (8000744 <is_button_pressed+0x30>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000048 	.word	0x20000048

08000748 <setTimerMode>:
int timer0_flag = 0;
static int timerMode_counter = 0;
int timerMode_flag = 0;


void setTimerMode ( int duration ){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	timerMode_counter = duration / TIMER_CYCLE ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <setTimerMode+0x2c>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1092      	asrs	r2, r2, #2
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <setTimerMode+0x30>)
 8000760:	6013      	str	r3, [r2, #0]
	timerMode_flag = 0;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <setTimerMode+0x34>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	66666667 	.word	0x66666667
 8000778:	20000068 	.word	0x20000068
 800077c:	2000006c 	.word	0x2000006c

08000780 <timerMode_run>:
void timerMode_run(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	if( timerMode_counter > 0){
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <timerMode_run+0x2c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dd0b      	ble.n	80007a4 <timerMode_run+0x24>
	timerMode_counter --;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <timerMode_run+0x2c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b01      	subs	r3, #1
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <timerMode_run+0x2c>)
 8000794:	6013      	str	r3, [r2, #0]
	if( timerMode_counter == 0) timerMode_flag = 1;
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <timerMode_run+0x2c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <timerMode_run+0x24>
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <timerMode_run+0x30>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
	}
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000068 	.word	0x20000068
 80007b0:	2000006c 	.word	0x2000006c

080007b4 <setTimerNormal>:
void setTimerNormal ( int duration ){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <setTimerNormal+0x2c>)
 80007c0:	fb82 1203 	smull	r1, r2, r2, r3
 80007c4:	1092      	asrs	r2, r2, #2
 80007c6:	17db      	asrs	r3, r3, #31
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <setTimerNormal+0x30>)
 80007cc:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <setTimerNormal+0x34>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	66666667 	.word	0x66666667
 80007e4:	20000060 	.word	0x20000060
 80007e8:	20000064 	.word	0x20000064

080007ec <timerNormal_run>:
void timerNormal_run(){
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <timerNormal_run+0x2c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dd0b      	ble.n	8000810 <timerNormal_run+0x24>
	timer0_counter --;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <timerNormal_run+0x2c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <timerNormal_run+0x2c>)
 8000800:	6013      	str	r3, [r2, #0]
	if( timer0_counter == 0) timer0_flag = 1;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <timerNormal_run+0x2c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <timerNormal_run+0x24>
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <timerNormal_run+0x30>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
	}
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000060 	.word	0x20000060
 800081c:	20000064 	.word	0x20000064

08000820 <init_led>:

enum Traffic_State {RED1_GREEN2, RED1_YELL2, RED2_YELL1, RED2_GREEN1} traffic_State;

enum Traffic_State traffic_State = RED1_GREEN2;

void init_led(int red_time, int yellow_time, int green_time){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	tmpRed = red_time;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <init_led+0x28>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6013      	str	r3, [r2, #0]
	tmpYell = yellow_time;
 8000832:	4a06      	ldr	r2, [pc, #24]	; (800084c <init_led+0x2c>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6013      	str	r3, [r2, #0]
	tmpGreen = green_time;
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <init_led+0x30>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	2000000c 	.word	0x2000000c
 800084c:	20000010 	.word	0x20000010
 8000850:	20000014 	.word	0x20000014

08000854 <clear_all>:
void clear_all(){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	483d      	ldr	r0, [pc, #244]	; (8000954 <clear_all+0x100>)
 8000860:	f001 f969 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	483a      	ldr	r0, [pc, #232]	; (8000954 <clear_all+0x100>)
 800086c:	f001 f963 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000876:	4837      	ldr	r0, [pc, #220]	; (8000954 <clear_all+0x100>)
 8000878:	f001 f95d 	bl	8001b36 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000882:	4834      	ldr	r0, [pc, #208]	; (8000954 <clear_all+0x100>)
 8000884:	f001 f957 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088e:	4831      	ldr	r0, [pc, #196]	; (8000954 <clear_all+0x100>)
 8000890:	f001 f951 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089a:	482e      	ldr	r0, [pc, #184]	; (8000954 <clear_all+0x100>)
 800089c:	f001 f94b 	bl	8001b36 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <clear_all+0x104>)
 80008a6:	f001 f946 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <clear_all+0x104>)
 80008b0:	f001 f941 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <clear_all+0x104>)
 80008ba:	f001 f93c 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4825      	ldr	r0, [pc, #148]	; (8000958 <clear_all+0x104>)
 80008c4:	f001 f937 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2110      	movs	r1, #16
 80008cc:	4822      	ldr	r0, [pc, #136]	; (8000958 <clear_all+0x104>)
 80008ce:	f001 f932 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <clear_all+0x104>)
 80008d8:	f001 f92d 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	481d      	ldr	r0, [pc, #116]	; (8000958 <clear_all+0x104>)
 80008e2:	f001 f928 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <clear_all+0x104>)
 80008ec:	f001 f923 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <clear_all+0x104>)
 80008f8:	f001 f91d 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <clear_all+0x104>)
 8000904:	f001 f917 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <clear_all+0x104>)
 8000910:	f001 f911 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <clear_all+0x104>)
 800091c:	f001 f90b 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <clear_all+0x104>)
 8000928:	f001 f905 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4809      	ldr	r0, [pc, #36]	; (8000958 <clear_all+0x104>)
 8000934:	f001 f8ff 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <clear_all+0x104>)
 8000940:	f001 f8f9 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <clear_all+0x104>)
 800094c:	f001 f8f3 	bl	8001b36 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40010800 	.word	0x40010800
 8000958:	40010c00 	.word	0x40010c00

0800095c <display_led_normal>:
void display_led_normal(int red_time, int yellow_time, int green_time){
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	for (int var = 0;  var < DISPLAY_TIME;  var++) {
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e282      	b.n	8000e74 <display_led_normal+0x518>
		switch(traffic_State){
 800096e:	4bb7      	ldr	r3, [pc, #732]	; (8000c4c <display_led_normal+0x2f0>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b03      	cmp	r3, #3
 8000974:	f200 827b 	bhi.w	8000e6e <display_led_normal+0x512>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <display_led_normal+0x24>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000991 	.word	0x08000991
 8000984:	08000ab9 	.word	0x08000ab9
 8000988:	08000d31 	.word	0x08000d31
 800098c:	08000beb 	.word	0x08000beb
	case RED1_GREEN2:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	48ae      	ldr	r0, [pc, #696]	; (8000c50 <display_led_normal+0x2f4>)
 8000998:	f001 f8cd 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	48ab      	ldr	r0, [pc, #684]	; (8000c50 <display_led_normal+0x2f4>)
 80009a4:	f001 f8c7 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ae:	48a8      	ldr	r0, [pc, #672]	; (8000c50 <display_led_normal+0x2f4>)
 80009b0:	f001 f8c1 	bl	8001b36 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ba:	48a5      	ldr	r0, [pc, #660]	; (8000c50 <display_led_normal+0x2f4>)
 80009bc:	f001 f8bb 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	48a2      	ldr	r0, [pc, #648]	; (8000c50 <display_led_normal+0x2f4>)
 80009c8:	f001 f8b5 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	489f      	ldr	r0, [pc, #636]	; (8000c50 <display_led_normal+0x2f4>)
 80009d4:	f001 f8af 	bl	8001b36 <HAL_GPIO_WritePin>
		if (tmpGreen==0 || tmpRed == 0){
 80009d8:	4b9e      	ldr	r3, [pc, #632]	; (8000c54 <display_led_normal+0x2f8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <display_led_normal+0x8c>
 80009e0:	4b9d      	ldr	r3, [pc, #628]	; (8000c58 <display_led_normal+0x2fc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d103      	bne.n	80009f0 <display_led_normal+0x94>
			traffic_State = RED1_YELL2;
 80009e8:	4b98      	ldr	r3, [pc, #608]	; (8000c4c <display_led_normal+0x2f0>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
			  tmpGreen--;
			  tmpRed--;
			  setTimerNormal(TIMER_TIME);
			}
		}
		break;
 80009ee:	e237      	b.n	8000e60 <display_led_normal+0x504>
			display7SEG(LED_SEGMENT1, tmpRed/10);
 80009f0:	4b99      	ldr	r3, [pc, #612]	; (8000c58 <display_led_normal+0x2fc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a99      	ldr	r2, [pc, #612]	; (8000c5c <display_led_normal+0x300>)
 80009f6:	fb82 1203 	smull	r1, r2, r2, r3
 80009fa:	1092      	asrs	r2, r2, #2
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff fbcc 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f000 fdd1 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fb9c 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT2, tmpRed%10);
 8000a14:	4b90      	ldr	r3, [pc, #576]	; (8000c58 <display_led_normal+0x2fc>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b90      	ldr	r3, [pc, #576]	; (8000c5c <display_led_normal+0x300>)
 8000a1a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a1e:	1099      	asrs	r1, r3, #2
 8000a20:	17d3      	asrs	r3, r2, #31
 8000a22:	1ac9      	subs	r1, r1, r3
 8000a24:	460b      	mov	r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	440b      	add	r3, r1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	1ad1      	subs	r1, r2, r3
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff fbb6 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 fdbb 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT2);
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff fb86 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT3, tmpGreen/10);
 8000a40:	4b84      	ldr	r3, [pc, #528]	; (8000c54 <display_led_normal+0x2f8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a85      	ldr	r2, [pc, #532]	; (8000c5c <display_led_normal+0x300>)
 8000a46:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4a:	1092      	asrs	r2, r2, #2
 8000a4c:	17db      	asrs	r3, r3, #31
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	4619      	mov	r1, r3
 8000a52:	2003      	movs	r0, #3
 8000a54:	f7ff fba4 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 fda9 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT3);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f7ff fb74 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT4, tmpGreen%10);
 8000a64:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <display_led_normal+0x2f8>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b7c      	ldr	r3, [pc, #496]	; (8000c5c <display_led_normal+0x300>)
 8000a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a6e:	1099      	asrs	r1, r3, #2
 8000a70:	17d3      	asrs	r3, r2, #31
 8000a72:	1ac9      	subs	r1, r1, r3
 8000a74:	460b      	mov	r3, r1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad1      	subs	r1, r2, r3
 8000a7e:	2004      	movs	r0, #4
 8000a80:	f7ff fb8e 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fd93 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT4);
 8000a8a:	2004      	movs	r0, #4
 8000a8c:	f7ff fb5e 	bl	800014c <turn_off_7seg>
			if(timer0_flag==1){
 8000a90:	4b73      	ldr	r3, [pc, #460]	; (8000c60 <display_led_normal+0x304>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	f040 81e3 	bne.w	8000e60 <display_led_normal+0x504>
			  tmpGreen--;
 8000a9a:	4b6e      	ldr	r3, [pc, #440]	; (8000c54 <display_led_normal+0x2f8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a6c      	ldr	r2, [pc, #432]	; (8000c54 <display_led_normal+0x2f8>)
 8000aa2:	6013      	str	r3, [r2, #0]
			  tmpRed--;
 8000aa4:	4b6c      	ldr	r3, [pc, #432]	; (8000c58 <display_led_normal+0x2fc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	4a6b      	ldr	r2, [pc, #428]	; (8000c58 <display_led_normal+0x2fc>)
 8000aac:	6013      	str	r3, [r2, #0]
			  setTimerNormal(TIMER_TIME);
 8000aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab2:	f7ff fe7f 	bl	80007b4 <setTimerNormal>
		break;
 8000ab6:	e1d3      	b.n	8000e60 <display_led_normal+0x504>
	case RED1_YELL2:
		  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abe:	4864      	ldr	r0, [pc, #400]	; (8000c50 <display_led_normal+0x2f4>)
 8000ac0:	f001 f839 	bl	8001b36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aca:	4861      	ldr	r0, [pc, #388]	; (8000c50 <display_led_normal+0x2f4>)
 8000acc:	f001 f833 	bl	8001b36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	485e      	ldr	r0, [pc, #376]	; (8000c50 <display_led_normal+0x2f4>)
 8000ad8:	f001 f82d 	bl	8001b36 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae2:	485b      	ldr	r0, [pc, #364]	; (8000c50 <display_led_normal+0x2f4>)
 8000ae4:	f001 f827 	bl	8001b36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aee:	4858      	ldr	r0, [pc, #352]	; (8000c50 <display_led_normal+0x2f4>)
 8000af0:	f001 f821 	bl	8001b36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afa:	4855      	ldr	r0, [pc, #340]	; (8000c50 <display_led_normal+0x2f4>)
 8000afc:	f001 f81b 	bl	8001b36 <HAL_GPIO_WritePin>
		  if (tmpYell==0 || tmpRed == 0){
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <display_led_normal+0x308>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <display_led_normal+0x1b4>
 8000b08:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <display_led_normal+0x2fc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <display_led_normal+0x1c6>
			  init_led(red_time, yellow_time, green_time);
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fe83 	bl	8000820 <init_led>
			  traffic_State = RED2_GREEN1;
 8000b1a:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <display_led_normal+0x2f0>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
				  tmpYell--;
				  tmpRed--;
				  setTimerNormal(TIMER_TIME);
			  }
		  	  }
		break;
 8000b20:	e1a0      	b.n	8000e64 <display_led_normal+0x508>
			  display7SEG(LED_SEGMENT1, tmpRed/10);
 8000b22:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <display_led_normal+0x2fc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a4d      	ldr	r2, [pc, #308]	; (8000c5c <display_led_normal+0x300>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	1092      	asrs	r2, r2, #2
 8000b2e:	17db      	asrs	r3, r3, #31
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fb33 	bl	80001a0 <display7SEG>
			  HAL_Delay(LED_TIME);
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f000 fd38 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fb03 	bl	800014c <turn_off_7seg>
			  display7SEG(LED_SEGMENT2, tmpRed%10);
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <display_led_normal+0x2fc>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <display_led_normal+0x300>)
 8000b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b50:	1099      	asrs	r1, r3, #2
 8000b52:	17d3      	asrs	r3, r2, #31
 8000b54:	1ac9      	subs	r1, r1, r3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad1      	subs	r1, r2, r3
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fb1d 	bl	80001a0 <display7SEG>
			  HAL_Delay(LED_TIME);
 8000b66:	2002      	movs	r0, #2
 8000b68:	f000 fd22 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff faed 	bl	800014c <turn_off_7seg>
			  display7SEG(LED_SEGMENT3, tmpYell/10);
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <display_led_normal+0x308>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <display_led_normal+0x300>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1092      	asrs	r2, r2, #2
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	2003      	movs	r0, #3
 8000b86:	f7ff fb0b 	bl	80001a0 <display7SEG>
			  HAL_Delay(LED_TIME);
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 fd10 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT3);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f7ff fadb 	bl	800014c <turn_off_7seg>
			  display7SEG(LED_SEGMENT4, tmpYell%10);
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <display_led_normal+0x308>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <display_led_normal+0x300>)
 8000b9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba0:	1099      	asrs	r1, r3, #2
 8000ba2:	17d3      	asrs	r3, r2, #31
 8000ba4:	1ac9      	subs	r1, r1, r3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1ad1      	subs	r1, r2, r3
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f7ff faf5 	bl	80001a0 <display7SEG>
			  HAL_Delay(LED_TIME);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f000 fcfa 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT4);
 8000bbc:	2004      	movs	r0, #4
 8000bbe:	f7ff fac5 	bl	800014c <turn_off_7seg>
			  if(timer0_flag==1){
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <display_led_normal+0x304>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 814c 	bne.w	8000e64 <display_led_normal+0x508>
				  tmpYell--;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <display_led_normal+0x308>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <display_led_normal+0x308>)
 8000bd4:	6013      	str	r3, [r2, #0]
				  tmpRed--;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <display_led_normal+0x2fc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <display_led_normal+0x2fc>)
 8000bde:	6013      	str	r3, [r2, #0]
				  setTimerNormal(TIMER_TIME);
 8000be0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be4:	f7ff fde6 	bl	80007b4 <setTimerNormal>
		break;
 8000be8:	e13c      	b.n	8000e64 <display_led_normal+0x508>
	case RED2_GREEN1:
		  	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <display_led_normal+0x2f4>)
 8000bf2:	f000 ffa0 	bl	8001b36 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <display_led_normal+0x2f4>)
 8000bfe:	f000 ff9a 	bl	8001b36 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <display_led_normal+0x2f4>)
 8000c0a:	f000 ff94 	bl	8001b36 <HAL_GPIO_WritePin>

		  	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <display_led_normal+0x2f4>)
 8000c16:	f000 ff8e 	bl	8001b36 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <display_led_normal+0x2f4>)
 8000c22:	f000 ff88 	bl	8001b36 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <display_led_normal+0x2f4>)
 8000c2e:	f000 ff82 	bl	8001b36 <HAL_GPIO_WritePin>
		if (tmpGreen==0 || tmpRed == 0){
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <display_led_normal+0x2f8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <display_led_normal+0x2e6>
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <display_led_normal+0x2fc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d112      	bne.n	8000c68 <display_led_normal+0x30c>
			  traffic_State = RED2_YELL1;
 8000c42:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <display_led_normal+0x2f0>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	701a      	strb	r2, [r3, #0]
				tmpGreen--;
				tmpRed--;
				setTimerNormal(TIMER_TIME);
			}
		}
		break;
 8000c48:	e10e      	b.n	8000e68 <display_led_normal+0x50c>
 8000c4a:	bf00      	nop
 8000c4c:	20000070 	.word	0x20000070
 8000c50:	40010800 	.word	0x40010800
 8000c54:	20000014 	.word	0x20000014
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	66666667 	.word	0x66666667
 8000c60:	20000064 	.word	0x20000064
 8000c64:	20000010 	.word	0x20000010
			display7SEG(LED_SEGMENT3, tmpRed/10);
 8000c68:	4b87      	ldr	r3, [pc, #540]	; (8000e88 <display_led_normal+0x52c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a87      	ldr	r2, [pc, #540]	; (8000e8c <display_led_normal+0x530>)
 8000c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c72:	1092      	asrs	r2, r2, #2
 8000c74:	17db      	asrs	r3, r3, #31
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f7ff fa90 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 fc95 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT3);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f7ff fa60 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT4, tmpRed%10);
 8000c8c:	4b7e      	ldr	r3, [pc, #504]	; (8000e88 <display_led_normal+0x52c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b7e      	ldr	r3, [pc, #504]	; (8000e8c <display_led_normal+0x530>)
 8000c92:	fb83 1302 	smull	r1, r3, r3, r2
 8000c96:	1099      	asrs	r1, r3, #2
 8000c98:	17d3      	asrs	r3, r2, #31
 8000c9a:	1ac9      	subs	r1, r1, r3
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	1ad1      	subs	r1, r2, r3
 8000ca6:	2004      	movs	r0, #4
 8000ca8:	f7ff fa7a 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 fc7f 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT4);
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f7ff fa4a 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT1, tmpGreen/10);
 8000cb8:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <display_led_normal+0x534>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a73      	ldr	r2, [pc, #460]	; (8000e8c <display_led_normal+0x530>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1092      	asrs	r2, r2, #2
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fa68 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 fc6d 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fa38 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT2, tmpGreen%10);
 8000cdc:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <display_led_normal+0x534>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <display_led_normal+0x530>)
 8000ce2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce6:	1099      	asrs	r1, r3, #2
 8000ce8:	17d3      	asrs	r3, r2, #31
 8000cea:	1ac9      	subs	r1, r1, r3
 8000cec:	460b      	mov	r3, r1
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	1ad1      	subs	r1, r2, r3
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fa52 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 fc57 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT2);
 8000d02:	2002      	movs	r0, #2
 8000d04:	f7ff fa22 	bl	800014c <turn_off_7seg>
			if(timer0_flag==1){
 8000d08:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <display_led_normal+0x538>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	f040 80ab 	bne.w	8000e68 <display_led_normal+0x50c>
				tmpGreen--;
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <display_led_normal+0x534>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4a5d      	ldr	r2, [pc, #372]	; (8000e90 <display_led_normal+0x534>)
 8000d1a:	6013      	str	r3, [r2, #0]
				tmpRed--;
 8000d1c:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <display_led_normal+0x52c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a59      	ldr	r2, [pc, #356]	; (8000e88 <display_led_normal+0x52c>)
 8000d24:	6013      	str	r3, [r2, #0]
				setTimerNormal(TIMER_TIME);
 8000d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2a:	f7ff fd43 	bl	80007b4 <setTimerNormal>
		break;
 8000d2e:	e09b      	b.n	8000e68 <display_led_normal+0x50c>
	case RED2_YELL1:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4858      	ldr	r0, [pc, #352]	; (8000e98 <display_led_normal+0x53c>)
 8000d38:	f000 fefd 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	4855      	ldr	r0, [pc, #340]	; (8000e98 <display_led_normal+0x53c>)
 8000d44:	f000 fef7 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4852      	ldr	r0, [pc, #328]	; (8000e98 <display_led_normal+0x53c>)
 8000d50:	f000 fef1 	bl	8001b36 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5a:	484f      	ldr	r0, [pc, #316]	; (8000e98 <display_led_normal+0x53c>)
 8000d5c:	f000 feeb 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	484c      	ldr	r0, [pc, #304]	; (8000e98 <display_led_normal+0x53c>)
 8000d68:	f000 fee5 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	4849      	ldr	r0, [pc, #292]	; (8000e98 <display_led_normal+0x53c>)
 8000d74:	f000 fedf 	bl	8001b36 <HAL_GPIO_WritePin>
		if (tmpYell==0 || tmpRed == 0){
 8000d78:	4b48      	ldr	r3, [pc, #288]	; (8000e9c <display_led_normal+0x540>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <display_led_normal+0x42c>
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <display_led_normal+0x52c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d108      	bne.n	8000d9a <display_led_normal+0x43e>
			init_led(red_time, yellow_time, green_time);
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fd47 	bl	8000820 <init_led>
			traffic_State = RED1_GREEN2;
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <display_led_normal+0x544>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
  				tmpYell--;
  				tmpRed--;
  				setTimerNormal(TIMER_TIME);
			}
			}
			break;
 8000d98:	e068      	b.n	8000e6c <display_led_normal+0x510>
			display7SEG(LED_SEGMENT3, tmpRed/10);
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <display_led_normal+0x52c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <display_led_normal+0x530>)
 8000da0:	fb82 1203 	smull	r1, r2, r2, r3
 8000da4:	1092      	asrs	r2, r2, #2
 8000da6:	17db      	asrs	r3, r3, #31
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	4619      	mov	r1, r3
 8000dac:	2003      	movs	r0, #3
 8000dae:	f7ff f9f7 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000db2:	2002      	movs	r0, #2
 8000db4:	f000 fbfc 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT3);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f7ff f9c7 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT4, tmpRed%10);
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <display_led_normal+0x52c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <display_led_normal+0x530>)
 8000dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc8:	1099      	asrs	r1, r3, #2
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad1      	subs	r1, r2, r3
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f7ff f9e1 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 fbe6 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT4);
 8000de4:	2004      	movs	r0, #4
 8000de6:	f7ff f9b1 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT1, tmpYell/10);
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <display_led_normal+0x540>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <display_led_normal+0x530>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	1092      	asrs	r2, r2, #2
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff f9cf 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 fbd4 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff f99f 	bl	800014c <turn_off_7seg>
			display7SEG(LED_SEGMENT2, tmpYell%10);
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <display_led_normal+0x540>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <display_led_normal+0x530>)
 8000e14:	fb83 1302 	smull	r1, r3, r3, r2
 8000e18:	1099      	asrs	r1, r3, #2
 8000e1a:	17d3      	asrs	r3, r2, #31
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad1      	subs	r1, r2, r3
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff f9b9 	bl	80001a0 <display7SEG>
			HAL_Delay(LED_TIME);
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f000 fbbe 	bl	80015b0 <HAL_Delay>
			turn_off_7seg(LED_SEGMENT2);
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff f989 	bl	800014c <turn_off_7seg>
			if(timer0_flag==1){
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <display_led_normal+0x538>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d114      	bne.n	8000e6c <display_led_normal+0x510>
  				tmpYell--;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <display_led_normal+0x540>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <display_led_normal+0x540>)
 8000e4a:	6013      	str	r3, [r2, #0]
  				tmpRed--;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <display_led_normal+0x52c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <display_led_normal+0x52c>)
 8000e54:	6013      	str	r3, [r2, #0]
  				setTimerNormal(TIMER_TIME);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f7ff fcab 	bl	80007b4 <setTimerNormal>
			break;
 8000e5e:	e005      	b.n	8000e6c <display_led_normal+0x510>
		break;
 8000e60:	bf00      	nop
 8000e62:	e004      	b.n	8000e6e <display_led_normal+0x512>
		break;
 8000e64:	bf00      	nop
 8000e66:	e002      	b.n	8000e6e <display_led_normal+0x512>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e000      	b.n	8000e6e <display_led_normal+0x512>
			break;
 8000e6c:	bf00      	nop
	for (int var = 0;  var < DISPLAY_TIME;  var++) {
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b13      	cmp	r3, #19
 8000e78:	f77f ad79 	ble.w	800096e <display_led_normal+0x12>
}
	}

}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	66666667 	.word	0x66666667
 8000e90:	20000014 	.word	0x20000014
 8000e94:	20000064 	.word	0x20000064
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	20000070 	.word	0x20000070

08000ea4 <display_mode>:

void display_mode(int mode, int red_time, int yellow_time, int green_time)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
	if	(timerMode_flag){
 8000eb2:	4b9c      	ldr	r3, [pc, #624]	; (8001124 <display_mode+0x280>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d079      	beq.n	8000fae <display_mode+0x10a>
		switch (mode){
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d04f      	beq.n	8000f60 <display_mode+0xbc>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	dc6f      	bgt.n	8000fa6 <display_mode+0x102>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d003      	beq.n	8000ed4 <display_mode+0x30>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d023      	beq.n	8000f1a <display_mode+0x76>
 8000ed2:	e068      	b.n	8000fa6 <display_mode+0x102>
				case 1:
					  HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4893      	ldr	r0, [pc, #588]	; (8001128 <display_mode+0x284>)
 8000eda:	f000 fe44 	bl	8001b66 <HAL_GPIO_TogglePin>
					  HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	4890      	ldr	r0, [pc, #576]	; (8001128 <display_mode+0x284>)
 8000ee6:	f000 fe26 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	488d      	ldr	r0, [pc, #564]	; (8001128 <display_mode+0x284>)
 8000ef2:	f000 fe20 	bl	8001b36 <HAL_GPIO_WritePin>

					  HAL_GPIO_TogglePin(LED2_RED_GPIO_Port, LED2_RED_Pin);
 8000ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efa:	488b      	ldr	r0, [pc, #556]	; (8001128 <display_mode+0x284>)
 8000efc:	f000 fe33 	bl	8001b66 <HAL_GPIO_TogglePin>
					  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4888      	ldr	r0, [pc, #544]	; (8001128 <display_mode+0x284>)
 8000f08:	f000 fe15 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f12:	4885      	ldr	r0, [pc, #532]	; (8001128 <display_mode+0x284>)
 8000f14:	f000 fe0f 	bl	8001b36 <HAL_GPIO_WritePin>
					break;
 8000f18:	e045      	b.n	8000fa6 <display_mode+0x102>
				case 2:
					  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f20:	4881      	ldr	r0, [pc, #516]	; (8001128 <display_mode+0x284>)
 8000f22:	f000 fe08 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_TogglePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin);
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	487f      	ldr	r0, [pc, #508]	; (8001128 <display_mode+0x284>)
 8000f2c:	f000 fe1b 	bl	8001b66 <HAL_GPIO_TogglePin>
					  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f36:	487c      	ldr	r0, [pc, #496]	; (8001128 <display_mode+0x284>)
 8000f38:	f000 fdfd 	bl	8001b36 <HAL_GPIO_WritePin>

					  HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4879      	ldr	r0, [pc, #484]	; (8001128 <display_mode+0x284>)
 8000f44:	f000 fdf7 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8000f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4c:	4876      	ldr	r0, [pc, #472]	; (8001128 <display_mode+0x284>)
 8000f4e:	f000 fe0a 	bl	8001b66 <HAL_GPIO_TogglePin>
					  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	4873      	ldr	r0, [pc, #460]	; (8001128 <display_mode+0x284>)
 8000f5a:	f000 fdec 	bl	8001b36 <HAL_GPIO_WritePin>
					break;
 8000f5e:	e022      	b.n	8000fa6 <display_mode+0x102>
				case 3:
					  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f66:	4870      	ldr	r0, [pc, #448]	; (8001128 <display_mode+0x284>)
 8000f68:	f000 fde5 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f72:	486d      	ldr	r0, [pc, #436]	; (8001128 <display_mode+0x284>)
 8000f74:	f000 fddf 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	486a      	ldr	r0, [pc, #424]	; (8001128 <display_mode+0x284>)
 8000f7e:	f000 fdf2 	bl	8001b66 <HAL_GPIO_TogglePin>

					  HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f88:	4867      	ldr	r0, [pc, #412]	; (8001128 <display_mode+0x284>)
 8000f8a:	f000 fdd4 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f94:	4864      	ldr	r0, [pc, #400]	; (8001128 <display_mode+0x284>)
 8000f96:	f000 fdce 	bl	8001b36 <HAL_GPIO_WritePin>
					  HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4862      	ldr	r0, [pc, #392]	; (8001128 <display_mode+0x284>)
 8000fa0:	f000 fde1 	bl	8001b66 <HAL_GPIO_TogglePin>
					break;
 8000fa4:	bf00      	nop
			}
		setTimerMode(ModeBlink);
 8000fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000faa:	f7ff fbcd 	bl	8000748 <setTimerMode>
	}
	  for(int i=0;i<DISPLAY_TIME;i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e0ad      	b.n	8001110 <display_mode+0x26c>
		  display7SEG(LED_SEGMENT1, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff f8f2 	bl	80001a0 <display7SEG>
		  HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 faf7 	bl	80015b0 <HAL_Delay>
		  turn_off_7seg(LED_SEGMENT1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff f8c2 	bl	800014c <turn_off_7seg>

		  display7SEG(LED_SEGMENT2, mode);
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff f8e8 	bl	80001a0 <display7SEG>
		  HAL_Delay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 faed 	bl	80015b0 <HAL_Delay>
		  turn_off_7seg(LED_SEGMENT2);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff f8b8 	bl	800014c <turn_off_7seg>

		  switch (mode){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d057      	beq.n	8001092 <display_mode+0x1ee>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	dc7b      	bgt.n	80010e0 <display_mode+0x23c>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <display_mode+0x152>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d027      	beq.n	8001044 <display_mode+0x1a0>
 8000ff4:	e074      	b.n	80010e0 <display_mode+0x23c>
		  case 1:
			  display7SEG(LED_SEGMENT3, red_time/10);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	; (800112c <display_mode+0x288>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	1092      	asrs	r2, r2, #2
 8001000:	17db      	asrs	r3, r3, #31
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4619      	mov	r1, r3
 8001006:	2003      	movs	r0, #3
 8001008:	f7ff f8ca 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 facf 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT3);
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff f89a 	bl	800014c <turn_off_7seg>

			  display7SEG(LED_SEGMENT4, red_time%10);
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	4b44      	ldr	r3, [pc, #272]	; (800112c <display_mode+0x288>)
 800101c:	fb83 1302 	smull	r1, r3, r3, r2
 8001020:	1099      	asrs	r1, r3, #2
 8001022:	17d3      	asrs	r3, r2, #31
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	460b      	mov	r3, r1
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1ad1      	subs	r1, r2, r3
 8001030:	2004      	movs	r0, #4
 8001032:	f7ff f8b5 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f000 faba 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT4);
 800103c:	2004      	movs	r0, #4
 800103e:	f7ff f885 	bl	800014c <turn_off_7seg>
			  break;
 8001042:	e062      	b.n	800110a <display_mode+0x266>
		  case 2:
			  display7SEG(LED_SEGMENT3, yellow_time/10);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a39      	ldr	r2, [pc, #228]	; (800112c <display_mode+0x288>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1092      	asrs	r2, r2, #2
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4619      	mov	r1, r3
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff f8a3 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 faa8 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT3);
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff f873 	bl	800014c <turn_off_7seg>

			  display7SEG(LED_SEGMENT4, yellow_time%10);
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <display_mode+0x288>)
 800106a:	fb83 1302 	smull	r1, r3, r3, r2
 800106e:	1099      	asrs	r1, r3, #2
 8001070:	17d3      	asrs	r3, r2, #31
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1ad1      	subs	r1, r2, r3
 800107e:	2004      	movs	r0, #4
 8001080:	f7ff f88e 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f000 fa93 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT4);
 800108a:	2004      	movs	r0, #4
 800108c:	f7ff f85e 	bl	800014c <turn_off_7seg>
			  break;
 8001090:	e03b      	b.n	800110a <display_mode+0x266>
		  case 3:
			  display7SEG(LED_SEGMENT3, green_time/10);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <display_mode+0x288>)
 8001096:	fb82 1203 	smull	r1, r2, r2, r3
 800109a:	1092      	asrs	r2, r2, #2
 800109c:	17db      	asrs	r3, r3, #31
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	2003      	movs	r0, #3
 80010a4:	f7ff f87c 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fa81 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT3);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff f84c 	bl	800014c <turn_off_7seg>

			  display7SEG(LED_SEGMENT4, green_time%10);
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <display_mode+0x288>)
 80010b8:	fb83 1302 	smull	r1, r3, r3, r2
 80010bc:	1099      	asrs	r1, r3, #2
 80010be:	17d3      	asrs	r3, r2, #31
 80010c0:	1ac9      	subs	r1, r1, r3
 80010c2:	460b      	mov	r3, r1
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	1ad1      	subs	r1, r2, r3
 80010cc:	2004      	movs	r0, #4
 80010ce:	f7ff f867 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fa6c 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT4);
 80010d8:	2004      	movs	r0, #4
 80010da:	f7ff f837 	bl	800014c <turn_off_7seg>
			  break;
 80010de:	e014      	b.n	800110a <display_mode+0x266>
		  default:
			  display7SEG(LED_SEGMENT3, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f7ff f85c 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fa61 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT3);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f7ff f82c 	bl	800014c <turn_off_7seg>

			  display7SEG(LED_SEGMENT4, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff f852 	bl	80001a0 <display7SEG>
			  HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fa57 	bl	80015b0 <HAL_Delay>
			  turn_off_7seg(LED_SEGMENT4);
 8001102:	2004      	movs	r0, #4
 8001104:	f7ff f822 	bl	800014c <turn_off_7seg>
			  break;
 8001108:	bf00      	nop
	  for(int i=0;i<DISPLAY_TIME;i++){
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b13      	cmp	r3, #19
 8001114:	f77f af4e 	ble.w	8000fb4 <display_mode+0x110>
		  }
	  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000006c 	.word	0x2000006c
 8001128:	40010800 	.word	0x40010800
 800112c:	66666667 	.word	0x66666667

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 f9da 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f814 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 f89a 	bl	8001274 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001140:	f000 f84c 	bl	80011dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2 );
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <main+0x30>)
 8001146:	f001 f95f 	bl	8002408 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 setTimerNormal(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114e:	f7ff fb31 	bl	80007b4 <setTimerNormal>
 setTimerMode(500);
 8001152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001156:	f7ff faf7 	bl	8000748 <setTimerMode>
  while (1)
  {
    /* USER CODE END WHILE */
	  	 fsm_for_input_processing();
 800115a:	f7ff f8bb 	bl	80002d4 <fsm_for_input_processing>
  {
 800115e:	e7fc      	b.n	800115a <main+0x2a>
 8001160:	20000074 	.word	0x20000074

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	; 0x40
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2228      	movs	r2, #40	; 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fd00 	bl	8002b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118a:	2301      	movs	r3, #1
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118e:	2310      	movs	r3, #16
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fcfc 	bl	8001b98 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011a6:	f000 f8d3 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ff68 	bl	8002098 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ce:	f000 f8bf 	bl	8001350 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3740      	adds	r7, #64	; 0x40
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_TIM2_Init+0x94>)
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_TIM2_Init+0x94>)
 8001202:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_TIM2_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_TIM2_Init+0x94>)
 8001210:	2209      	movs	r2, #9
 8001212:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_TIM2_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_TIM2_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <MX_TIM2_Init+0x94>)
 8001222:	f001 f8a1 	bl	8002368 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800122c:	f000 f890 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_TIM2_Init+0x94>)
 800123e:	f001 fa37 	bl	80026b0 <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 f882 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_TIM2_Init+0x94>)
 800125a:	f001 fbff 	bl	8002a5c <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001264:	f000 f874 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000074 	.word	0x20000074

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_GPIO_Init+0xd0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <MX_GPIO_Init+0xd0>)
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_GPIO_Init+0xd0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a27      	ldr	r2, [pc, #156]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80012d0:	2200      	movs	r2, #0
 80012d2:	f643 711e 	movw	r1, #16158	; 0x3f1e
 80012d6:	481c      	ldr	r0, [pc, #112]	; (8001348 <MX_GPIO_Init+0xd4>)
 80012d8:	f000 fc2d 	bl	8001b36 <HAL_GPIO_WritePin>
                          |LED1_RED_Pin|LED1_YELLOW_Pin|LED1_GREEN_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80012dc:	2200      	movs	r2, #0
 80012de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <MX_GPIO_Init+0xd8>)
 80012e4:	f000 fc27 	bl	8001b36 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED1_RED_Pin LED1_YELLOW_Pin LED1_GREEN_Pin LED2_RED_Pin
                           LED2_YELLOW_Pin LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80012e8:	f643 731e 	movw	r3, #16158	; 0x3f1e
 80012ec:	613b      	str	r3, [r7, #16]
                          |LED1_RED_Pin|LED1_YELLOW_Pin|LED1_GREEN_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_GPIO_Init+0xd4>)
 8001302:	f000 fa87 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001306:	23e0      	movs	r3, #224	; 0xe0
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0xd4>)
 800131a:	f000 fa7b 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800131e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001322:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_GPIO_Init+0xd8>)
 8001338:	f000 fa6c 	bl	8001814 <HAL_GPIO_Init>

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_MspInit+0x5c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x5c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x60>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_MspInit+0x60>)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201c      	movs	r0, #28
 80013f0:	f000 f9d9 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f4:	201c      	movs	r0, #28
 80013f6:	f000 f9f2 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f893 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM2_IRQHandler+0x10>)
 800145e:	f001 f81f 	bl	80024a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000074 	.word	0x20000074

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_TIM_PeriodElapsedCallback>:
# include "main.h"
# include "input_reading.h"


 void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d105      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x1e>
	 button_reading();
 800148a:	f7ff f8b9 	bl	8000600 <button_reading>
	 timerNormal_run();
 800148e:	f7ff f9ad 	bl	80007ec <timerNormal_run>
	 timerMode_run();
 8001492:	f7ff f975 	bl	8000780 <timerMode_run>
	}
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c6:	f7ff ffd1 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f001 fb31 	bl	8002b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fe2f 	bl	8001130 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80014dc:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 80014e0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80014e4:	200000c0 	.word	0x200000c0

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f947 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff ff28 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f95f 	bl	80017fa <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f927 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000018 	.word	0x20000018
 8001570:	20000020 	.word	0x20000020
 8001574:	2000001c 	.word	0x2000001c

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x1c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x20>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000020 	.word	0x20000020
 8001598:	200000bc 	.word	0x200000bc

0800159c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_GetTick+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	200000bc 	.word	0x200000bc

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fff0 	bl	800159c <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffe0 	bl	800159c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000020 	.word	0x20000020

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__NVIC_EnableIRQ+0x34>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff90 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff2d 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff42 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff35 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b08b      	sub	sp, #44	; 0x2c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e148      	b.n	8001aba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001828:	2201      	movs	r2, #1
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8137 	bne.w	8001ab4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4aa3      	ldr	r2, [pc, #652]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d05e      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001850:	4aa1      	ldr	r2, [pc, #644]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d875      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001856:	4aa1      	ldr	r2, [pc, #644]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d058      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 800185c:	4a9f      	ldr	r2, [pc, #636]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d86f      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001862:	4a9f      	ldr	r2, [pc, #636]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d052      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001868:	4a9d      	ldr	r2, [pc, #628]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d869      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800186e:	4a9d      	ldr	r2, [pc, #628]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04c      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001874:	4a9b      	ldr	r2, [pc, #620]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d863      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800187a:	4a9b      	ldr	r2, [pc, #620]	; (8001ae8 <HAL_GPIO_Init+0x2d4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d046      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001880:	4a99      	ldr	r2, [pc, #612]	; (8001ae8 <HAL_GPIO_Init+0x2d4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d85d      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d82a      	bhi.n	80018e0 <HAL_GPIO_Init+0xcc>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d859      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_GPIO_Init+0x80>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	0800190f 	.word	0x0800190f
 8001898:	080018e9 	.word	0x080018e9
 800189c:	080018fb 	.word	0x080018fb
 80018a0:	0800193d 	.word	0x0800193d
 80018a4:	08001943 	.word	0x08001943
 80018a8:	08001943 	.word	0x08001943
 80018ac:	08001943 	.word	0x08001943
 80018b0:	08001943 	.word	0x08001943
 80018b4:	08001943 	.word	0x08001943
 80018b8:	08001943 	.word	0x08001943
 80018bc:	08001943 	.word	0x08001943
 80018c0:	08001943 	.word	0x08001943
 80018c4:	08001943 	.word	0x08001943
 80018c8:	08001943 	.word	0x08001943
 80018cc:	08001943 	.word	0x08001943
 80018d0:	08001943 	.word	0x08001943
 80018d4:	08001943 	.word	0x08001943
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	08001905 	.word	0x08001905
 80018e0:	4a82      	ldr	r2, [pc, #520]	; (8001aec <HAL_GPIO_Init+0x2d8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e6:	e02c      	b.n	8001942 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e029      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e024      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	3308      	adds	r3, #8
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e01f      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	330c      	adds	r3, #12
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e01a      	b.n	8001944 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001916:	2304      	movs	r3, #4
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e013      	b.n	8001944 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	611a      	str	r2, [r3, #16]
          break;
 800192e:	e009      	b.n	8001944 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	615a      	str	r2, [r3, #20]
          break;
 800193a:	e003      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x130>
          break;
 8001942:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d801      	bhi.n	800194e <HAL_GPIO_Init+0x13a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_Init+0x13e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d802      	bhi.n	8001960 <HAL_GPIO_Init+0x14c>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x152>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3b08      	subs	r3, #8
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	210f      	movs	r1, #15
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8090 	beq.w	8001ab4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <HAL_GPIO_Init+0x2e0>)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1e0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a48      	ldr	r2, [pc, #288]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1dc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x1e2>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x1e2>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x1e2>
 80019f4:	2300      	movs	r3, #0
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a06:	493b      	ldr	r1, [pc, #236]	; (8001af4 <HAL_GPIO_Init+0x2e0>)
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a2e:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4933      	ldr	r1, [pc, #204]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	492d      	ldr	r1, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4923      	ldr	r1, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	491f      	ldr	r1, [pc, #124]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4919      	ldr	r1, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4915      	ldr	r1, [pc, #84]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f47f aeaf 	bne.w	8001828 <HAL_GPIO_Init+0x14>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	372c      	adds	r7, #44	; 0x2c
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10310000 	.word	0x10310000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10120000 	.word	0x10120000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	807b      	strh	r3, [r7, #2]
 8001b42:	4613      	mov	r3, r2
 8001b44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b46:	787b      	ldrb	r3, [r7, #1]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4c:	887a      	ldrh	r2, [r7, #2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b52:	e003      	b.n	8001b5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	611a      	str	r2, [r3, #16]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	400b      	ands	r3, r1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e26c      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8087 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00c      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d168      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e246      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e02e      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0xbc>
 8001c3a:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc92 	bl	800159c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fc8e 	bl	800159c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1fa      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe4>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc7e 	bl	800159c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fc7a 	bl	800159c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1e6      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cde:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
 8001cea:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1ba      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4939      	ldr	r1, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fc33 	bl	800159c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fc2f 	bl	800159c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e19b      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4927      	ldr	r1, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fc12 	bl	800159c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fc0e 	bl	800159c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fbf2 	bl	800159c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fbee 	bl	800159c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e15a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 faa6 	bl	800232c <RCC_Delay>
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fbd8 	bl	800159c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fbd4 	bl	800159c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d908      	bls.n	8001e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e140      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420000 	.word	0x42420000
 8001e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e9      	bne.n	8001df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a93      	ldr	r2, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a8a      	ldr	r2, [pc, #552]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb95 	bl	800159c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fb91 	bl	800159c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0fd      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x356>
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a69      	ldr	r2, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a66      	ldr	r2, [pc, #408]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb45 	bl	800159c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fb41 	bl	800159c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ab      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fb2f 	bl	800159c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb2b 	bl	800159c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e095      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8081 	beq.w	8002082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d061      	beq.n	8002050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d146      	bne.n	8002022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff faff 	bl	800159c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fafb 	bl	800159c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e067      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	492d      	ldr	r1, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	430b      	orrs	r3, r1
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff facf 	bl	800159c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff facb 	bl	800159c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e037      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
 8002020:	e02f      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fab8 	bl	800159c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff fab4 	bl	800159c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e020      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x498>
 800204e:	e018      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	42420060 	.word	0x42420060

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff fa08 	bl	800159c <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff fa04 	bl	800159c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f966 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	08002bbc 	.word	0x08002bbc
 8002264:	20000018 	.word	0x20000018
 8002268:	2000001c 	.word	0x2000001c

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b490      	push	{r4, r7}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002274:	1d3c      	adds	r4, r7, #4
 8002276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800227c:	f240 2301 	movw	r3, #513	; 0x201
 8002280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x46>
 80022aa:	e02d      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	e02d      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022be:	4413      	add	r3, r2
 80022c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ea:	fb02 f203 	mul.w	r2, r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	e004      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	623b      	str	r3, [r7, #32]
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6a3b      	ldr	r3, [r7, #32]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3728      	adds	r7, #40	; 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bc90      	pop	{r4, r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	08002bac 	.word	0x08002bac
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	003d0900 	.word	0x003d0900

0800232c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <RCC_Delay+0x34>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <RCC_Delay+0x38>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0a5b      	lsrs	r3, r3, #9
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002348:	bf00      	nop
  }
  while (Delay --);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	60fa      	str	r2, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f9      	bne.n	8002348 <RCC_Delay+0x1c>
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000018 	.word	0x20000018
 8002364:	10624dd3 	.word	0x10624dd3

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e041      	b.n	80023fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff f816 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 fa6a 	bl	8002880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d001      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e035      	b.n	800248c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a16      	ldr	r2, [pc, #88]	; (8002498 <HAL_TIM_Base_Start_IT+0x90>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_TIM_Base_Start_IT+0x4e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d004      	beq.n	8002456 <HAL_TIM_Base_Start_IT+0x4e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <HAL_TIM_Base_Start_IT+0x94>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d111      	bne.n	800247a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b06      	cmp	r3, #6
 8002466:	d010      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	e007      	b.n	800248a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40000400 	.word	0x40000400

080024a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d122      	bne.n	80024fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0202 	mvn.w	r2, #2
 80024cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f9b1 	bl	800284a <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f9a4 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f9b3 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0204 	mvn.w	r2, #4
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f987 	bl	800284a <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f97a 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f989 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b08      	cmp	r3, #8
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b08      	cmp	r3, #8
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0208 	mvn.w	r2, #8
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2204      	movs	r2, #4
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f95d 	bl	800284a <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f950 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f95f 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0210 	mvn.w	r2, #16
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2208      	movs	r2, #8
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f933 	bl	800284a <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f926 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f935 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0201 	mvn.w	r2, #1
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe ff2a 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b80      	cmp	r3, #128	; 0x80
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d107      	bne.n	8002650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa67 	bl	8002b1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d10e      	bne.n	800267c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d107      	bne.n	800267c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8f9 	bl	800286e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b20      	cmp	r3, #32
 8002688:	d10e      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b20      	cmp	r3, #32
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0220 	mvn.w	r2, #32
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa32 	bl	8002b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x18>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0b3      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x180>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d03e      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0xd0>
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002706:	f200 8087 	bhi.w	8002818 <HAL_TIM_ConfigClockSource+0x168>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	f000 8085 	beq.w	800281c <HAL_TIM_ConfigClockSource+0x16c>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	d87f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d01a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xa2>
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d87b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d050      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x116>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d877      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d03c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xf6>
 800272c:	2b50      	cmp	r3, #80	; 0x50
 800272e:	d873      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d058      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x136>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d86f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d064      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x156>
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d86b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d060      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x156>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d867      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x156>
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002750:	e062      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f000 f95c 	bl	8002a1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002774:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	609a      	str	r2, [r3, #8]
      break;
 800277e:	e04e      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f000 f945 	bl	8002a1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	609a      	str	r2, [r3, #8]
      break;
 80027a4:	e03b      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8bc 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2150      	movs	r1, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f913 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 80027c4:	e02b      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8da 	bl	800298c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2160      	movs	r1, #96	; 0x60
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f903 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 80027e4:	e01b      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f89c 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8f3 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 8002804:	e00b      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f000 f8ea 	bl	80029ea <TIM_ITRx_SetConfig>
        break;
 8002816:	e002      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002818:	bf00      	nop
 800281a:	e000      	b.n	800281e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800281c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a25      	ldr	r2, [pc, #148]	; (8002928 <TIM_Base_SetConfig+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <TIM_Base_SetConfig+0x28>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0x28>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a22      	ldr	r2, [pc, #136]	; (800292c <TIM_Base_SetConfig+0xac>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d108      	bne.n	80028ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <TIM_Base_SetConfig+0xa8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x52>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x52>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <TIM_Base_SetConfig+0xac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <TIM_Base_SetConfig+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400

08002930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f023 030a 	bic.w	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0210 	bic.w	r2, r3, #16
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	031b      	lsls	r3, r3, #12
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	621a      	str	r2, [r3, #32]
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f043 0307 	orr.w	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b087      	sub	sp, #28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	609a      	str	r2, [r3, #8]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e041      	b.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d004      	beq.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10c      	bne.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <__libc_init_array>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2600      	movs	r6, #0
 8002b34:	4d0c      	ldr	r5, [pc, #48]	; (8002b68 <__libc_init_array+0x38>)
 8002b36:	4c0d      	ldr	r4, [pc, #52]	; (8002b6c <__libc_init_array+0x3c>)
 8002b38:	1b64      	subs	r4, r4, r5
 8002b3a:	10a4      	asrs	r4, r4, #2
 8002b3c:	42a6      	cmp	r6, r4
 8002b3e:	d109      	bne.n	8002b54 <__libc_init_array+0x24>
 8002b40:	f000 f822 	bl	8002b88 <_init>
 8002b44:	2600      	movs	r6, #0
 8002b46:	4d0a      	ldr	r5, [pc, #40]	; (8002b70 <__libc_init_array+0x40>)
 8002b48:	4c0a      	ldr	r4, [pc, #40]	; (8002b74 <__libc_init_array+0x44>)
 8002b4a:	1b64      	subs	r4, r4, r5
 8002b4c:	10a4      	asrs	r4, r4, #2
 8002b4e:	42a6      	cmp	r6, r4
 8002b50:	d105      	bne.n	8002b5e <__libc_init_array+0x2e>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b58:	4798      	blx	r3
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	e7ee      	b.n	8002b3c <__libc_init_array+0xc>
 8002b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b62:	4798      	blx	r3
 8002b64:	3601      	adds	r6, #1
 8002b66:	e7f2      	b.n	8002b4e <__libc_init_array+0x1e>
 8002b68:	08002bcc 	.word	0x08002bcc
 8002b6c:	08002bcc 	.word	0x08002bcc
 8002b70:	08002bcc 	.word	0x08002bcc
 8002b74:	08002bd0 	.word	0x08002bd0

08002b78 <memset>:
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4402      	add	r2, r0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <memset+0xa>
 8002b80:	4770      	bx	lr
 8002b82:	f803 1b01 	strb.w	r1, [r3], #1
 8002b86:	e7f9      	b.n	8002b7c <memset+0x4>

08002b88 <_init>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr

08002b94 <_fini>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr
